{"ast":null,"code":"export var PLAYER_FUNCTIONS = {\n  durationScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getDuration', data: player.getDuration()}));\\ntrue;\\n\",\n  currentTimeScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getCurrentTime', data: player.getCurrentTime()}));\\ntrue;\\n\",\n  isMutedScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'isMuted', data: player.isMuted()}));\\ntrue;\\n\",\n  getVolumeScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getVolume', data: player.getVolume()}));\\ntrue;\\n\",\n  getPlaybackRateScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getPlaybackRate', data: player.getPlaybackRate()}));\\ntrue;\\n\",\n  getAvailablePlaybackRatesScript: \"\\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getAvailablePlaybackRates', data: player.getAvailablePlaybackRates()}));\\ntrue;\\n\",\n  seekToScript: function seekToScript(seconds, allowSeekAhead) {\n    return \"\\nplayer.seekTo(\" + seconds + \", \" + allowSeekAhead + \")\\n\";\n  },\n  playVideo: 'player.playVideo(); true;',\n  pauseVideo: 'player.pauseVideo(); true;',\n  muteVideo: 'player.mute(); true;',\n  unMuteVideo: 'player.unMute(); true;',\n  setPlaybackRate: function setPlaybackRate(playbackRate) {\n    return \"player.setPlaybackRate(\" + playbackRate + \"); true;\";\n  },\n  setVolume: function setVolume(volume) {\n    return \"player.setVolume(\" + volume + \"); true;\";\n  },\n  loadPlaylist: function loadPlaylist(playList, startIndex, play) {\n    return \"\\n  player.\" + (play ? 'loadPlaylist' : 'cuePlaylist') + \"({playlist: \" + JSON.stringify(playList) + \",\\n    index: \" + (startIndex || 0) + \"}); true;\";\n  }\n};\nexport var MAIN_SCRIPT = function MAIN_SCRIPT(videoId, playList, _ref, allowWebViewZoom) {\n  var _ref$loop = _ref.loop,\n      loop = _ref$loop === void 0 ? false : _ref$loop,\n      _ref$controls = _ref.controls,\n      controls = _ref$controls === void 0 ? true : _ref$controls,\n      cc_lang_pref = _ref.cc_lang_pref,\n      showClosedCaptions = _ref.showClosedCaptions,\n      color = _ref.color,\n      end = _ref.end,\n      _ref$preventFullScree = _ref.preventFullScreen,\n      preventFullScreen = _ref$preventFullScree === void 0 ? false : _ref$preventFullScree,\n      playerLang = _ref.playerLang,\n      iv_load_policy = _ref.iv_load_policy,\n      modestbranding = _ref.modestbranding,\n      rel = _ref.rel,\n      start = _ref.start;\n  return \"<!DOCTYPE html>\\n<html>\\n  <head>\\n    <meta\\n      name=\\\"viewport\\\"\\n      content=\\\"width=device-width, initial-scale=1.0\" + (allowWebViewZoom ? '' : ', maximum-scale=1') + \"\\\"\\n    >\\n    <style>\\n      body {\\n        margin: 0;\\n      }\\n      .container {\\n        position: relative;\\n        width: 100%;\\n        height: 0;\\n        padding-bottom: 56.25%;\\n      }\\n      .video {\\n          position: absolute;\\n          top: 0;\\n          left: 0;\\n          width: 100%;\\n          height: 100%;\\n      }\\n    </style>\\n  </head>\\n  <body>\\n    <div class=\\\"container\\\">\\n      <div class=\\\"video\\\" id=\\\"player\\\" />\\n    </div>\\n\\n    <script>\\n      var tag = document.createElement('script');\\n\\n      tag.src = \\\"https://www.youtube.com/iframe_api\\\";\\n      var firstScriptTag = document.getElementsByTagName('script')[0];\\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\\n\\n\\n      var player;\\n      function onYouTubeIframeAPIReady() {\\n        player = new YT.Player('player', {\\n          height: '1000',\\n          width: '1000',\\n          videoId: '\" + (videoId || '') + \"',\\n          playerVars: {\\n            playsinline: 1,\\n            loop: \" + (loop ? 1 : 0) + \",\\n            controls: \" + (controls ? 1 : 0) + \",\\n            cc_lang_pref: '\" + (cc_lang_pref || '') + \"',\\n            cc_load_policy: \" + (showClosedCaptions ? 1 : 0) + \",\\n            color: \" + color + \",\\n            end: \" + end + \",\\n            fs: \" + (preventFullScreen ? 0 : 1) + \",\\n            hl: \" + playerLang + \",\\n            iv_load_policy: \" + iv_load_policy + \",\\n            modestbranding: \" + (modestbranding ? 1 : 0) + \",\\n            rel: \" + (rel ? 1 : 0) + \",\\n            start: \" + start + \",\\n            listType:  '\" + (typeof playList === 'string' ? 'playlist' : '') + \"',\\n            list: '\" + (typeof playList === 'string' ? playList : '') + \"',\\n          },\\n          events: {\\n            'onReady': onPlayerReady,\\n            'onStateChange': onPlayerStateChange,\\n            'onError': onPlayerError,\\n            'onPlaybackQualityChange': onPlaybackQualityChange,\\n            'onPlaybackRateChange': onPlaybackRateChange,\\n          }\\n        });\\n      }\\n\\n      function onPlayerError(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerError', data: event.data}))\\n      }\\n\\n      function onPlaybackRateChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playbackRateChange', data: event.data}))\\n      }\\n\\n      function onPlaybackQualityChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerQualityChange', data: event.data}))\\n      }\\n\\n      function onPlayerReady(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerReady'}))\\n      }\\n\\n      var done = false;\\n      function onPlayerStateChange(event) {\\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerStateChange', data: event.data}))\\n      }\\n    </script>\\n  </body>\\n</html>\";\n};","map":{"version":3,"sources":["C:/Users/Jonas/Desktop/React_Native/Reactseals-Movie-Review-Android-App/movieapp/node_modules/react-native-youtube-iframe/src/PlayerScripts.js"],"names":["PLAYER_FUNCTIONS","durationScript","currentTimeScript","isMutedScript","getVolumeScript","getPlaybackRateScript","getAvailablePlaybackRatesScript","seekToScript","seconds","allowSeekAhead","playVideo","pauseVideo","muteVideo","unMuteVideo","setPlaybackRate","playbackRate","setVolume","volume","loadPlaylist","playList","startIndex","play","JSON","stringify","MAIN_SCRIPT","videoId","allowWebViewZoom","loop","controls","cc_lang_pref","showClosedCaptions","color","end","preventFullScreen","playerLang","iv_load_policy","modestbranding","rel","start"],"mappings":"AAAA,OAAO,IAAMA,gBAAgB,GAAG;AAC9BC,EAAAA,cAAc,6HADgB;AAK9BC,EAAAA,iBAAiB,mIALa;AAS9BC,EAAAA,aAAa,qHATiB;AAa9BC,EAAAA,eAAe,yHAbe;AAiB9BC,EAAAA,qBAAqB,qIAjBS;AAqB9BC,EAAAA,+BAA+B,yJArBD;AAyB9BC,EAAAA,YAAY,EAAE,sBAACC,OAAD,EAAUC,cAAV;AAAA,gCACAD,OADA,UACYC,cADZ;AAAA,GAzBgB;AA4B9BC,EAAAA,SAAS,EAAE,2BA5BmB;AA6B9BC,EAAAA,UAAU,EAAE,4BA7BkB;AA8B9BC,EAAAA,SAAS,EAAE,sBA9BmB;AA+B9BC,EAAAA,WAAW,EAAE,wBA/BiB;AAgC9BC,EAAAA,eAAe,EAAE,yBAAAC,YAAY;AAAA,uCACDA,YADC;AAAA,GAhCC;AAkC9BC,EAAAA,SAAS,EAAE,mBAAAC,MAAM;AAAA,iCAAwBA,MAAxB;AAAA,GAlCa;AAmC9BC,EAAAA,YAAY,EAAE,sBAACC,QAAD,EAAWC,UAAX,EAAuBC,IAAvB;AAAA,4BACLA,IAAI,GAAG,cAAH,GAAoB,aADnB,qBAC+CC,IAAI,CAACC,SAAL,CAC3DJ,QAD2D,CAD/C,uBAIHC,UAAU,IAAI,CAJX;AAAA;AAnCgB,CAAzB;AA0CP,OAAO,IAAMI,WAAW,GAAG,SAAdA,WAAc,CACzBC,OADyB,EAEzBN,QAFyB,QAiBzBO,gBAjByB;AAAA,uBAIvBC,IAJuB;AAAA,MAIvBA,IAJuB,0BAIhB,KAJgB;AAAA,2BAKvBC,QALuB;AAAA,MAKvBA,QALuB,8BAKZ,IALY;AAAA,MAMvBC,YANuB,QAMvBA,YANuB;AAAA,MAOvBC,kBAPuB,QAOvBA,kBAPuB;AAAA,MAQvBC,KARuB,QAQvBA,KARuB;AAAA,MASvBC,GATuB,QASvBA,GATuB;AAAA,mCAUvBC,iBAVuB;AAAA,MAUvBA,iBAVuB,sCAUH,KAVG;AAAA,MAWvBC,UAXuB,QAWvBA,UAXuB;AAAA,MAYvBC,cAZuB,QAYvBA,cAZuB;AAAA,MAavBC,cAbuB,QAavBA,cAbuB;AAAA,MAcvBC,GAduB,QAcvBA,GAduB;AAAA,MAevBC,KAfuB,QAevBA,KAfuB;AAAA,2IAwBnBZ,gBAAgB,GAAG,EAAH,GAAQ,mBAxBL,+5BAgELD,OAAO,IAAI,EAhEN,sFAmEPE,IAAI,GAAG,CAAH,GAAO,CAnEJ,mCAoEHC,QAAQ,GAAG,CAAH,GAAO,CApEZ,wCAqEEC,YAAY,IAAI,EArElB,0CAsEGC,kBAAkB,GAAG,CAAH,GAAO,CAtE5B,+BAuENC,KAvEM,4BAwERC,GAxEQ,4BAyETC,iBAAiB,GAAG,CAAH,GAAO,CAzEf,4BA0ETC,UA1ES,uCA2EGC,cA3EH,wCA4EGC,cAAc,GAAG,CAAH,GAAO,CA5ExB,8BA6ERC,GAAG,GAAG,CAAH,GAAO,CA7EF,+BA8ENC,KA9EM,oCA+ED,OAAOnB,QAAP,KAAoB,QAApB,GAA+B,UAA/B,GAA4C,EA/E3C,iCAgFN,OAAOA,QAAP,KAAoB,QAApB,GAA+BA,QAA/B,GAA0C,EAhFpC;AAAA,CAApB","sourcesContent":["export const PLAYER_FUNCTIONS = {\n  durationScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getDuration', data: player.getDuration()}));\ntrue;\n`,\n  currentTimeScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getCurrentTime', data: player.getCurrentTime()}));\ntrue;\n`,\n  isMutedScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'isMuted', data: player.isMuted()}));\ntrue;\n`,\n  getVolumeScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getVolume', data: player.getVolume()}));\ntrue;\n`,\n  getPlaybackRateScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getPlaybackRate', data: player.getPlaybackRate()}));\ntrue;\n`,\n  getAvailablePlaybackRatesScript: `\nwindow.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'getAvailablePlaybackRates', data: player.getAvailablePlaybackRates()}));\ntrue;\n`,\n  seekToScript: (seconds, allowSeekAhead) => `\nplayer.seekTo(${seconds}, ${allowSeekAhead})\n`,\n  playVideo: 'player.playVideo(); true;',\n  pauseVideo: 'player.pauseVideo(); true;',\n  muteVideo: 'player.mute(); true;',\n  unMuteVideo: 'player.unMute(); true;',\n  setPlaybackRate: playbackRate =>\n    `player.setPlaybackRate(${playbackRate}); true;`,\n  setVolume: volume => `player.setVolume(${volume}); true;`,\n  loadPlaylist: (playList, startIndex, play) => `\n  player.${play ? 'loadPlaylist' : 'cuePlaylist'}({playlist: ${JSON.stringify(\n    playList,\n  )},\n    index: ${startIndex || 0}}); true;`,\n};\n\nexport const MAIN_SCRIPT = (\n  videoId,\n  playList,\n  {\n    loop = false,\n    controls = true,\n    cc_lang_pref, // country code\n    showClosedCaptions,\n    color, // 'red' or 'white'\n    end,\n    preventFullScreen = false,\n    playerLang,\n    iv_load_policy,\n    modestbranding,\n    rel,\n    start,\n  },\n  allowWebViewZoom,\n) => `<!DOCTYPE html>\n<html>\n  <head>\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1.0${\n        allowWebViewZoom ? '' : ', maximum-scale=1'\n      }\"\n    >\n    <style>\n      body {\n        margin: 0;\n      }\n      .container {\n        position: relative;\n        width: 100%;\n        height: 0;\n        padding-bottom: 56.25%;\n      }\n      .video {\n          position: absolute;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"video\" id=\"player\" />\n    </div>\n\n    <script>\n      var tag = document.createElement('script');\n\n      tag.src = \"https://www.youtube.com/iframe_api\";\n      var firstScriptTag = document.getElementsByTagName('script')[0];\n      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n\n      var player;\n      function onYouTubeIframeAPIReady() {\n        player = new YT.Player('player', {\n          height: '1000',\n          width: '1000',\n          videoId: '${videoId || ''}',\n          playerVars: {\n            playsinline: 1,\n            loop: ${loop ? 1 : 0},\n            controls: ${controls ? 1 : 0},\n            cc_lang_pref: '${cc_lang_pref || ''}',\n            cc_load_policy: ${showClosedCaptions ? 1 : 0},\n            color: ${color},\n            end: ${end},\n            fs: ${preventFullScreen ? 0 : 1},\n            hl: ${playerLang},\n            iv_load_policy: ${iv_load_policy},\n            modestbranding: ${modestbranding ? 1 : 0},\n            rel: ${rel ? 1 : 0},\n            start: ${start},\n            listType:  '${typeof playList === 'string' ? 'playlist' : ''}',\n            list: '${typeof playList === 'string' ? playList : ''}',\n          },\n          events: {\n            'onReady': onPlayerReady,\n            'onStateChange': onPlayerStateChange,\n            'onError': onPlayerError,\n            'onPlaybackQualityChange': onPlaybackQualityChange,\n            'onPlaybackRateChange': onPlaybackRateChange,\n          }\n        });\n      }\n\n      function onPlayerError(event) {\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerError', data: event.data}))\n      }\n\n      function onPlaybackRateChange(event) {\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playbackRateChange', data: event.data}))\n      }\n\n      function onPlaybackQualityChange(event) {\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerQualityChange', data: event.data}))\n      }\n\n      function onPlayerReady(event) {\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerReady'}))\n      }\n\n      var done = false;\n      function onPlayerStateChange(event) {\n        window.ReactNativeWebView.postMessage(JSON.stringify({eventType: 'playerStateChange', data: event.data}))\n      }\n    </script>\n  </body>\n</html>`;\n"]},"metadata":{},"sourceType":"module"}