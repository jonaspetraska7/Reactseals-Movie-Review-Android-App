{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Jonas\\\\Desktop\\\\React_Native\\\\Reactseals-Movie-Review-Android-App\\\\movieapp\\\\node_modules\\\\react-native-youtube-iframe\\\\src\\\\YoutubeIframe.js\";\nimport React, { useRef, useEffect, useCallback, useImperativeHandle, forwardRef, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport WebView from 'react-native-webview';\nimport { PLAYER_STATES, PLAYER_ERROR, CUSTOM_USER_AGENT } from \"./constants\";\nimport { EventEmitter } from 'events';\nimport { MAIN_SCRIPT, PLAYER_FUNCTIONS } from \"./PlayerScripts\";\n\nvar YoutubeIframe = function YoutubeIframe(_ref, ref) {\n  var height = _ref.height,\n      width = _ref.width,\n      videoId = _ref.videoId,\n      playList = _ref.playList,\n      _ref$play = _ref.play,\n      play = _ref$play === void 0 ? false : _ref$play,\n      _ref$mute = _ref.mute,\n      mute = _ref$mute === void 0 ? false : _ref$mute,\n      _ref$volume = _ref.volume,\n      volume = _ref$volume === void 0 ? 100 : _ref$volume,\n      webViewStyle = _ref.webViewStyle,\n      webViewProps = _ref.webViewProps,\n      _ref$playbackRate = _ref.playbackRate,\n      playbackRate = _ref$playbackRate === void 0 ? 1 : _ref$playbackRate,\n      _ref$onError = _ref.onError,\n      onError = _ref$onError === void 0 ? function (_err) {} : _ref$onError,\n      _ref$onReady = _ref.onReady,\n      onReady = _ref$onReady === void 0 ? function (_event) {} : _ref$onReady,\n      _ref$playListStartInd = _ref.playListStartIndex,\n      playListStartIndex = _ref$playListStartInd === void 0 ? 0 : _ref$playListStartInd,\n      _ref$initialPlayerPar = _ref.initialPlayerParams,\n      initialPlayerParams = _ref$initialPlayerPar === void 0 ? {} : _ref$initialPlayerPar,\n      _ref$allowWebViewZoom = _ref.allowWebViewZoom,\n      allowWebViewZoom = _ref$allowWebViewZoom === void 0 ? false : _ref$allowWebViewZoom,\n      _ref$forceAndroidAuto = _ref.forceAndroidAutoplay,\n      forceAndroidAutoplay = _ref$forceAndroidAuto === void 0 ? false : _ref$forceAndroidAuto,\n      _ref$onChangeState = _ref.onChangeState,\n      onChangeState = _ref$onChangeState === void 0 ? function (_event) {} : _ref$onChangeState,\n      _ref$onPlaybackQualit = _ref.onPlaybackQualityChange,\n      onPlaybackQualityChange = _ref$onPlaybackQualit === void 0 ? function (_quality) {} : _ref$onPlaybackQualit,\n      _ref$onPlaybackRateCh = _ref.onPlaybackRateChange,\n      onPlaybackRateChange = _ref$onPlaybackRateCh === void 0 ? function (_playbackRate) {} : _ref$onPlaybackRateCh;\n  var webViewRef = useRef(null);\n  var eventEmitter = useRef(new EventEmitter());\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      playerReady = _useState2[0],\n      setPlayerReady = _useState2[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      getDuration: function getDuration() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.durationScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('getDuration', resolve);\n        });\n      },\n      getCurrentTime: function getCurrentTime() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.currentTimeScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('getCurrentTime', resolve);\n        });\n      },\n      isMuted: function isMuted() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.isMutedScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('isMuted', resolve);\n        });\n      },\n      getVolume: function getVolume() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.getVolumeScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('getVolume', resolve);\n        });\n      },\n      getPlaybackRate: function getPlaybackRate() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.getPlaybackRateScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('getPlaybackRate', resolve);\n        });\n      },\n      getAvailablePlaybackRates: function getAvailablePlaybackRates() {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.getAvailablePlaybackRatesScript);\n        return new Promise(function (resolve) {\n          eventEmitter.current.once('getAvailablePlaybackRates', resolve);\n        });\n      },\n      seekTo: function seekTo(seconds, allowSeekAhead) {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.seekToScript(seconds, allowSeekAhead));\n      }\n    };\n  }, []);\n  useEffect(function () {\n    if (playerReady) {\n      if (play) {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.playVideo);\n      } else {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.pauseVideo);\n      }\n\n      if (mute) {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.muteVideo);\n      } else {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.unMuteVideo);\n      }\n\n      webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.setVolume(volume));\n      webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.setPlaybackRate(playbackRate));\n    }\n  }, [play, playerReady, mute, volume, playbackRate]);\n  var onWebMessage = useCallback(function (event) {\n    var message = JSON.parse(event.nativeEvent.data);\n\n    try {\n      switch (message.eventType) {\n        case 'playerStateChange':\n          onChangeState(PLAYER_STATES[message.data]);\n          break;\n\n        case 'playerReady':\n          onReady();\n          setPlayerReady(true);\n\n          if (Array.isArray(playList)) {\n            webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.loadPlaylist(playList, playListStartIndex, play));\n          }\n\n          break;\n\n        case 'playerQualityChange':\n          onPlaybackQualityChange(message.data);\n          break;\n\n        case 'playerError':\n          onError(PLAYER_ERROR[message.data]);\n          break;\n\n        case 'playbackRateChange':\n          onPlaybackRateChange(message.data);\n          break;\n\n        default:\n          eventEmitter.current.emit(message.eventType, message.data);\n          break;\n      }\n    } catch (error) {\n      console.warn(error);\n    }\n  }, [onChangeState, onReady, onPlaybackQualityChange, onError, onPlaybackRateChange, playListStartIndex, playList, play]);\n  return React.createElement(View, {\n    style: {\n      height: height,\n      width: width\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, React.createElement(WebView, _extends({\n    ref: webViewRef,\n    originWhitelist: ['*'],\n    onMessage: onWebMessage,\n    allowsInlineMediaPlayback: true,\n    style: [styles.webView, webViewStyle],\n    mediaPlaybackRequiresUserAction: false,\n    allowsFullscreenVideo: !(initialPlayerParams == null ? void 0 : initialPlayerParams.preventFullScreen),\n    source: {\n      html: MAIN_SCRIPT(videoId, playList, initialPlayerParams, allowWebViewZoom)\n    },\n    userAgent: forceAndroidAutoplay ? Platform.select({\n      android: CUSTOM_USER_AGENT,\n      ios: ''\n    }) : '',\n    onShouldStartLoadWithRequest: function onShouldStartLoadWithRequest(request) {\n      return request.mainDocumentURL === 'about:blank';\n    }\n  }, webViewProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  })));\n};\n\nvar styles = StyleSheet.create({\n  webView: {\n    backgroundColor: 'transparent'\n  }\n});\nexport default forwardRef(YoutubeIframe);","map":{"version":3,"sources":["C:/Users/Jonas/Desktop/React_Native/Reactseals-Movie-Review-Android-App/movieapp/node_modules/react-native-youtube-iframe/src/YoutubeIframe.js"],"names":["React","useRef","useEffect","useCallback","useImperativeHandle","forwardRef","useState","WebView","PLAYER_STATES","PLAYER_ERROR","CUSTOM_USER_AGENT","EventEmitter","MAIN_SCRIPT","PLAYER_FUNCTIONS","YoutubeIframe","ref","height","width","videoId","playList","play","mute","volume","webViewStyle","webViewProps","playbackRate","onError","_err","onReady","_event","playListStartIndex","initialPlayerParams","allowWebViewZoom","forceAndroidAutoplay","onChangeState","onPlaybackQualityChange","_quality","onPlaybackRateChange","_playbackRate","webViewRef","eventEmitter","playerReady","setPlayerReady","getDuration","current","injectJavaScript","durationScript","Promise","resolve","once","getCurrentTime","currentTimeScript","isMuted","isMutedScript","getVolume","getVolumeScript","getPlaybackRate","getPlaybackRateScript","getAvailablePlaybackRates","getAvailablePlaybackRatesScript","seekTo","seconds","allowSeekAhead","seekToScript","playVideo","pauseVideo","muteVideo","unMuteVideo","setVolume","setPlaybackRate","onWebMessage","event","message","JSON","parse","nativeEvent","data","eventType","Array","isArray","loadPlaylist","emit","error","console","warn","styles","webView","preventFullScreen","html","Platform","select","android","ios","request","mainDocumentURL","StyleSheet","create","backgroundColor"],"mappings":"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","sourcesContent":["import React, {\n  useRef,\n  useEffect,\n  useCallback,\n  useImperativeHandle,\n  forwardRef,\n  useState,\n} from 'react';\nimport {View, StyleSheet, Platform} from 'react-native';\nimport WebView from 'react-native-webview';\nimport {PLAYER_STATES, PLAYER_ERROR, CUSTOM_USER_AGENT} from './constants';\nimport {EventEmitter} from 'events';\nimport {MAIN_SCRIPT, PLAYER_FUNCTIONS} from './PlayerScripts';\n\nconst YoutubeIframe = (\n  {\n    height,\n    width,\n    videoId,\n    playList,\n    play = false,\n    mute = false,\n    volume = 100,\n    webViewStyle,\n    webViewProps,\n    playbackRate = 1,\n    onError = _err => {},\n    onReady = _event => {},\n    playListStartIndex = 0,\n    initialPlayerParams = {},\n    allowWebViewZoom = false,\n    forceAndroidAutoplay = false,\n    onChangeState = _event => {},\n    onPlaybackQualityChange = _quality => {},\n    onPlaybackRateChange = _playbackRate => {},\n  },\n  ref,\n) => {\n  const webViewRef = useRef(null);\n  const eventEmitter = useRef(new EventEmitter());\n  const [playerReady, setPlayerReady] = useState(false);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      getDuration: () => {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.durationScript);\n        return new Promise(resolve => {\n          eventEmitter.current.once('getDuration', resolve);\n        });\n      },\n      getCurrentTime: () => {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.currentTimeScript);\n        return new Promise(resolve => {\n          eventEmitter.current.once('getCurrentTime', resolve);\n        });\n      },\n      isMuted: () => {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.isMutedScript);\n        return new Promise(resolve => {\n          eventEmitter.current.once('isMuted', resolve);\n        });\n      },\n      getVolume: () => {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.getVolumeScript);\n        return new Promise(resolve => {\n          eventEmitter.current.once('getVolume', resolve);\n        });\n      },\n      getPlaybackRate: () => {\n        webViewRef.current.injectJavaScript(\n          PLAYER_FUNCTIONS.getPlaybackRateScript,\n        );\n        return new Promise(resolve => {\n          eventEmitter.current.once('getPlaybackRate', resolve);\n        });\n      },\n      getAvailablePlaybackRates: () => {\n        webViewRef.current.injectJavaScript(\n          PLAYER_FUNCTIONS.getAvailablePlaybackRatesScript,\n        );\n        return new Promise(resolve => {\n          eventEmitter.current.once('getAvailablePlaybackRates', resolve);\n        });\n      },\n      seekTo: (seconds, allowSeekAhead) => {\n        webViewRef.current.injectJavaScript(\n          PLAYER_FUNCTIONS.seekToScript(seconds, allowSeekAhead),\n        );\n      },\n    }),\n    [],\n  );\n\n  useEffect(() => {\n    if (playerReady) {\n      if (play) {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.playVideo);\n      } else {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.pauseVideo);\n      }\n\n      if (mute) {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.muteVideo);\n      } else {\n        webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.unMuteVideo);\n      }\n      webViewRef.current.injectJavaScript(PLAYER_FUNCTIONS.setVolume(volume));\n      webViewRef.current.injectJavaScript(\n        PLAYER_FUNCTIONS.setPlaybackRate(playbackRate),\n      );\n    }\n  }, [play, playerReady, mute, volume, playbackRate]);\n\n  const onWebMessage = useCallback(\n    event => {\n      const message = JSON.parse(event.nativeEvent.data);\n      try {\n        switch (message.eventType) {\n          case 'playerStateChange':\n            onChangeState(PLAYER_STATES[message.data]);\n            break;\n          case 'playerReady':\n            onReady();\n            setPlayerReady(true);\n            if (Array.isArray(playList)) {\n              webViewRef.current.injectJavaScript(\n                PLAYER_FUNCTIONS.loadPlaylist(\n                  playList,\n                  playListStartIndex,\n                  play,\n                ),\n              );\n            }\n            break;\n          case 'playerQualityChange':\n            onPlaybackQualityChange(message.data);\n            break;\n          case 'playerError':\n            onError(PLAYER_ERROR[message.data]);\n            break;\n          case 'playbackRateChange':\n            onPlaybackRateChange(message.data);\n            break;\n          default:\n            eventEmitter.current.emit(message.eventType, message.data);\n            break;\n        }\n      } catch (error) {\n        console.warn(error);\n      }\n    },\n    [\n      onChangeState,\n      onReady,\n      onPlaybackQualityChange,\n      onError,\n      onPlaybackRateChange,\n      playListStartIndex,\n      playList,\n      play,\n    ],\n  );\n\n  return (\n    <View style={{height, width}}>\n      <WebView\n        ref={webViewRef}\n        originWhitelist={['*']}\n        onMessage={onWebMessage}\n        allowsInlineMediaPlayback\n        style={[styles.webView, webViewStyle]}\n        mediaPlaybackRequiresUserAction={false}\n        allowsFullscreenVideo={!initialPlayerParams?.preventFullScreen}\n        source={{\n          html: MAIN_SCRIPT(\n            videoId,\n            playList,\n            initialPlayerParams,\n            allowWebViewZoom,\n          ),\n        }}\n        userAgent={\n          forceAndroidAutoplay\n            ? Platform.select({android: CUSTOM_USER_AGENT, ios: ''})\n            : ''\n        }\n        onShouldStartLoadWithRequest={request => {\n          return request.mainDocumentURL === 'about:blank';\n        }}\n        {...webViewProps}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  webView: {backgroundColor: 'transparent'},\n});\n\nexport default forwardRef(YoutubeIframe);\n"]},"metadata":{},"sourceType":"module"}